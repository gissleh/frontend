extends ../layout.pug

include ../mixins/dart.pug
include ../mixins/score_header.pug

block scripts
    script(src='/javascripts/socket.io-2.0.3.min.js')
    script.
        var leg = !{JSON.stringify(leg)}
        var playersMap = !{JSON.stringify(players)}
        $(function () {
            var legId = leg.id;
            var socket = io(window.location.protocol + '//' + window.location.host + '/legs/' + legId);
            socket.on('connect', function(data) {
                socket.emit('join', 'Client Conneting');
            });

            socket.on('connected', function(data) {
                // Send message to client announcing that we are spectating
                socket.emit('spectator_connected', '');
            });

            socket.on('possible_throw', function(data) {
                var dart;
                if (data.darts_thrown === 1) {
                    dart = $('#first');
                }
                else if (data.darts_thrown === 2) {
                    dart = $('#second');
                }
                else if (data.darts_thrown === 3) {
                    dart = $('#third');
                }
                else {
                    console.log("Unknown darts_thrown: " + data.darts_thrown);
                    return;
                }
                dart.text(data.dart_text);

                dart.removeClass('dart-score-single dart-score-double dart-score-triple');
                if (data.multiplier == 3) {
                    dart.addClass('dart-score-triple');
                }
                else if (data.multiplier == 2) {
                    dart.addClass('dart-score-double');
                }
                else {
                    dart.addClass('dart-score-single');
                }

                if (data.is_finished) {
                    var text = playersMap[data.current_player_id].name + ' won the leg';
                    showAlert(text, function() {
                        alertify.success('Leg finished');
                    });

                    var legsWon = $('.uv-active-player-legs').find('label');
                    legsWon.text(parseInt(legsWon.text()) + 1)
                }
            });

            socket.on('score_update', function(data) {
                var players = data.players;
                for (key in players) {
                    var player = players[key];
                    var playerLabel = $('#player-id-' + player.player_id);
                    var playerTD = $('#player-score-' + player.player_id);
                    var playerLegsTD = $('#player-legs-' + player.player_id);
                    playerLabel.text(player.current_score);
                    if (player.is_current_player) {
                        playerTD.removeClass('uv-inactive-player-score');
                        playerTD.addClass('uv-active-player-score');
                        playerLegsTD.removeClass('uv-inactive-player-legs');
                        playerLegsTD.addClass('uv-active-player-legs');
                    } else {
                        playerTD.addClass('uv-inactive-player-score');
                        playerTD.removeClass('uv-active-player-score');
                        playerLegsTD.addClass('uv-inactive-player-legs');
                        playerLegsTD.removeClass('uv-active-player-legs');
                    }
                }
                // Set round number
                $('#round-number').text('R' + (Math.floor(data.leg.visits.length / data.leg.players.length) + 1));
                $('#current-player').text(playersMap[data.leg.current_player_id].name);

                // Reset UI elements
                $('#first').text('');
                $('#first').removeClass();
                $('#second').text('');
                $('#second').removeClass();
                $('#third').text('');
                $('#third').removeClass();
                $('#total').text(0);

                // Update the visits table
                var visit = data.leg.visits[data.leg.visits.length - 1];
                var playerName = playersMap[visit.player_id].name;
                var total = (visit.first_dart.multiplier * visit.first_dart.value ) +
                    (visit.second_dart.multiplier * visit.second_dart.value) +
                    (visit.third_dart.multiplier * visit.third_dart.value);
                if (visit.is_bust) {
                    total = 'BUST';
                }
                // Append the score to the beginning of the table
                var html =
                    "<tr>" +
                        "<td>" + playerName + "</td>" +
                        "<td class='col-sm-2 dart-score-container no-border'><label class='" + getDartCSS(visit.first_dart) + "'>" + getScoreString(visit.first_dart) + "</label></td>" +
                        "<td class='col-sm-2 dart-score-container no-border'><label class='" + getDartCSS(visit.second_dart) + "'>" + getScoreString(visit.second_dart) + "</label></td>" +
                        "<td class='col-sm-2 dart-score-container no-border'><label class='" + getDartCSS(visit.third_dart) + "'>" + getScoreString(visit.third_dart) + "</label></td>" +
                        "<td><label>" + total + "</label></td>" +
                    "</tr>";
                $('#table-leg-visits > tbody > tr:first').after(html);
            });

            socket.on('leg_finished', function(data) {
                console.log(data);
                location.href = '/legs/' + data.new_leg_id + '/umpire';
            });

            // Reverse the rows in the table to show newest throws first
            var tbody = $('#table-leg-visits tbody');
            tbody.html($('tr', tbody).get().reverse());

            // Add a row to the top of the table which contains the current throw for a given player
            if (!leg.is_finished) {
                var html =
                    "<tr>" +
                        "<td id='current-player' style='height: 50px;'>" + playersMap[leg.current_player_id].name + "</td>" +
                        "<td class='dart-score-container no-border'><label id='first' text='0'></label></td>" +
                        "<td class='dart-score-container no-border'><label id='second' text='0'></label></td>" +
                        "<td class='dart-score-container no-border'><label id='third' text='0'></label></td>" +
                        "<td><label id='total' text='0'>0</label></td>" +
                    "</tr>";
                $('#table-leg-visits').prepend(html);
            }

            function getDartCSS(dart) {
                switch (dart.multiplier) {
                    case 3: return 'dart-score-triple';
                    case 2: return 'dart-score-double';
                    default: return 'dart-score-single';
                }
            }

            function getScoreString(dart) {
                var score = dart.value;
                if (score === 0) {
                    return 'Miss';
                }
                else if (score === 25) {
                    score = 'Bull';
                }

                if (dart.multiplier === 3) {
                    return 'T-' + score;
                }
                else if (dart.multiplier === 2) {
                    return 'D-' + score;
                }
                return score;
            }
        });

block content
    h2 Scorer

    - var round_number = Math.floor(leg.visits.length / leg.players.length) + 1;
    +get_score_header(match.match_mode, round_number, leg_players, match.tournament_id != null)

    h3 Visits
    div(class='table-responsive')
        table(class='table table-striped table-bordered' id='table-leg-visits' style='table-layout: fixed;')
            thead
                tr
                    th Player
                    th First
                    th Second
                    th Third
                    th Total
            tbody
                each visit in leg.visits
                    tr
                        td= players[visit.player_id].name
                        +dart_container(visit.first_dart.value, visit.first_dart.multiplier)
                        +dart_container(visit.second_dart.value, visit.second_dart.multiplier)
                        +dart_container(visit.third_dart.value, visit.third_dart.multiplier)
                        td
                            if visit.is_bust
                                label BUST
                            else
                                label= (visit.first_dart.multiplier * visit.first_dart.value ) + (visit.second_dart.multiplier * visit.second_dart.value) + (visit.third_dart.multiplier * visit.third_dart.value)
