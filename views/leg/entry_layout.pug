extends ../layout.pug

include ../mixins/score_header.pug
include ../mixins/player_order.pug

block append head
    script(src='/javascripts/responsivevoice.1.5.8..js')
    script(src='/javascripts/views/entry_layout.js')
    script(src='/javascripts/moment-2.20.1.min.js')

block scripts
    script(src='/javascripts/fastclick-1.0.6.min.js')
    script(src='/javascripts/socket.io-2.0.3.min.js')
    script
        include socketio_helper.js
    script.
        var scores = {};
        var leg = !{JSON.stringify(leg)}
        var legId = leg.id;
        var match = !{JSON.stringify(match)}

        var VOICE = "US English Female";
        var currentDart = 1;

        // Returns current dart container of active player
        function getCurrentDartContainer(currentDart) {
            var dart;
            switch (currentDart) {
                case 1:
                    dart = $('.visits-active .first');
                    break;
                case 2:
                    dart = $('.visits-active .second');
                    break;
                case 3:
                    dart = $('.visits-active .third');
                    break;
                default:
                    dart = null;
                    break;
            }
            return dart;
        }

        $(function () {
            // Functions to be loaded after document load

            var disableEnter = false;

            $(document).keydown(function (e) {
                if (e.key === 'Backspace') {
                    var totalScoreContainer = $('.visits-active .dart-score-total');
                    var currentPlayerScore = parseInt(totalScoreContainer.html());

                    var dart = getCurrentDartContainer(currentDart);
                    if (dartValue !== '') {
                        dartValue = '';
                        clearDart(dart);
                        scores[currentDart] = 0;

                        // Make sure we don't change score for current player before we press ENTER
                        totalScoreContainer.html(currentPlayerScore);
                    } else {
                        $('#undo-button').trigger('click');
                    }
                    e.preventDefault();
                }
                return;
            });

            var dartValue = '';
            var dartMultiplier = 1;

            $(document).keypress(function (e) {
                var dart = getCurrentDartContainer(currentDart);
                var totalScoreContainer = $('.visits-active .total-score');
                var currentPlayerScore = parseInt(totalScoreContainer.html());
                switch (e.key) {
                    case '1': dartValue += '1'; break;
                    case '2': dartValue += '2'; break;
                    case '3': dartValue += '3'; break;
                    case '4': dartValue += '4'; break;
                    case '5': dartValue += '5'; break;
                    case '6': dartValue += '6'; break;
                    case '7': dartValue += '7'; break;
                    case '8': dartValue += '8'; break;
                    case '9': dartValue += '9'; break;
                    case '0': dartValue += '0'; break;
                    case '/': // Single
                        dartMultiplier = 1;
                        break;
                    case '*': // Double
                        dartMultiplier = 2;
                        break;
                    case ',': // Triple
                    case '-': // Triple
                        var value = parseInt(dartValue);
                        if (value === 25) {
                            disableEnter = true;
                            showAlert('Invalid value', function () { });
                            return;
                        }
                        dartMultiplier = 3;
                        break;
                    case '+': // Cycle through multipliers
                        var value = parseInt(dartValue);
                        if (dartValue === '' || value === 0) {
                            return;
                        }
                        dartMultiplier++;
                        if (value === 25) {
                            dartMultiplier = dartMultiplier > 2 ? 1 : dartMultiplier;
                        } else {
                            dartMultiplier = dartMultiplier > 3 ? 1 : dartMultiplier;
                        }
                        setCurrentDartContainerValues(dart, dartValue * dartMultiplier, dartMultiplier);
                        totalScoreContainer.html(currentPlayerScore);
                        return;
                    case 'Enter':
                        if (disableEnter) {
                            disableEnter = false;
                            return;
                        }
                        if (currentDart === 4) {
                            $('#submit-score-button').trigger('click');
                        }
                        else {
                            var scoreNumeric = 0;
                            if (dartValue === '') {
                                setCurrentDartContainerValues(dart, 0, 1);
                            }
                            else {
                                scoreNumeric = parseInt(dartValue) * dart.attr('data-multiplier');
                            }
                            checkVisitFinished(dart, scoreNumeric);
                            updateTotalVisitScore(scoreNumeric);
                        }
                        dartValue = '';
                        dartMultiplier = 1;
                        return;
                        break;
                    default: break;
                }
                var value = parseInt(dartValue);

                if ((value > 20 && value !== 25) || (value == 25 && dartMultiplier > 2)) {
                    dartValue = dartValue.substring(0, dartValue.length - 1);
                    disableEnter = true;
                    showAlert('Invalid value', function () { });
                }

                if (dartValue !== '') {
                    setCurrentDartContainerValues(dart, dartValue * dartMultiplier, dartMultiplier);
                }

                totalScoreContainer.html(currentPlayerScore);
            });

            $('#toggle-keyboard-button').click(function () {
                location.href = '/legs/' + legId;
            });

            function setMultiplierClass(dartContainer, multiplier) {
                dartContainer.removeClass('dart-score-single dart-score-double dart-score-triple');
                if (multiplier == 1) {
                    className = 'dart-score-single';
                } else if (multiplier == 2) {
                    className = 'dart-score-double';
                } else if (multiplier == 3) {
                    className = 'dart-score-triple';
                }
                dartContainer.addClass(className);
            }

            // Set multiplier and score on active player's current dart container
            function setCurrentDartContainerValues(dart, score, multiplier) {
                var scoreInt = parseInt(score);
                // Missed ?
                if (scoreInt === 0 ) {
                    multiplier = 1;
                    dartMultiplier = 1;
                    score = 0;
                }

                // Triple
                if (multiplier == 3) {
                    dartText = 'T-' + score / multiplier;
                    setMultiplierClass(dart, multiplier)
                }
                // Double
                else if (multiplier == 2) {
                    dartText = 'D-' + score / multiplier;
                    setMultiplierClass(dart, multiplier)
                }
                // Missed
                else if (score === 0) {
                    dartText = 'Miss';
                    setMultiplierClass(dart, multiplier)
                }
                // Single
                else {
                    dartText = score;
                    setMultiplierClass(dart, 1)
                }

                dart.text(dartText);
                dart.attr('data-text', dartText);
                dart.attr('data-score', score / multiplier);
                dart.attr('data-multiplier', multiplier);

                updateTotalVisitScore(score)
                scores[currentDart] = scoreInt;
            }

            // Add given score to active player's total score container
            function updateTotalVisitScore(score) {
                var totalScoreContainer = $('.visits-active .total-score');
                var total = parseInt(totalScoreContainer.html()) + parseInt(score);
                totalScoreContainer.html(total);
            }

            // Update score iside current player's container
            function updatePlayerScore(score) {
                // For unknown reason current player is stored as data attribute on submit button
                var currentPlayerId = $('#submit-score-button').data('current-player-id');
                var currentPlayerScoreContainer = $('#player-score-' + currentPlayerId);
                var currentScore = parseInt(currentPlayerScoreContainer.text());
                currentPlayerScoreContainer.text(currentScore - score);
            }

            function checkVisitFinished(dart, scoreNumeric) {
                var isBust = false;
                var isFinished = false;

                var currentPlayerId = $('#submit-score-button').data('current-player-id');
                var currentPlayerScoreContainer = $('#player-score-' + currentPlayerId);
                var currentPlayerScore = parseInt(currentPlayerScoreContainer.text());

                var scoreAfterThrow = parseInt(currentPlayerScore - scoreNumeric);
                if (scoreAfterThrow == 0) {
                    if (dart.attr('data-multiplier') == 2) {
                        disableEnter = true;
                        currentDart++;
                        updatePlayerScore(scoreNumeric);
                        socket.emit('possible_throw', {
                                current_player_id: currentPlayerId,
                                score: scoreNumeric,
                                dart_text: dart.text(),
                                multiplier: dart.attr('data-multiplier'),
                                is_bust: isBust,
                                is_finished: isFinished,
                                darts_thrown: currentDart - 1
                        });
                        showConfirm('Leg will be finished.', function() {
                            socket.emit('possible_throw', {
                                    current_player_id: currentPlayerId,
                                    is_finished: true
                            });
                            // End leg, 'click' submit
                            $('#submit-score-button').data('finished', 1).trigger('click');
                        }, function(){
                            $('#undo-button').trigger('click');
                        });
                        // Return so we don't trigger any code checking for bust
                        return;
                    }
                    else {
                        isBust = true;
                    }
                }
                else if (scoreAfterThrow <= 1) {
                    isBust = true;
                }

                if (isBust) {
                    disableEnter = true;
                    socket.emit('possible_throw', {
                            current_player_id: currentPlayerId,
                            score: scoreNumeric,
                            dart_text: dart.text(),
                            multiplier: dart.attr('data-multiplier'),
                            is_bust: isBust,
                            is_finished: isFinished,
                            darts_thrown: currentDart
                    });
                    showConfirm('Player busted', function() {
                        // Emit a dart throw for spectators
                        alertify.success('Player busted');
                        $('#submit-score-button').data('busted', 1).trigger('click');
                    }, function(){
                        // Clear the score for thrown dart
                        $('#undo-button').trigger('click');
                    });
                }
                else {
                    // Emit a dart throw for spectators
                    this.socket.emit('possible_throw', {
                            current_player_id: currentPlayerId,
                            score: scoreNumeric,
                            dart_text: dart.text(),
                            multiplier: dart.attr('data-multiplier'),
                            is_bust: isBust,
                            is_finished: isFinished,
                            darts_thrown: currentDart
                    });
                }
                currentDart++;
                updatePlayerScore(scoreNumeric);
            }

            // ---------------------
            // TODO - refactor below
            // ---------------------

            FastClick.attach(document.body);

            if (leg.is_finished) {
                return;
            }
            var socket = getLegsNamespace(leg);
            socket.on('spectator_connected', function (data) {
                alertify.success(data + ' connected');
            });
            socket.on('spectator_disconnected', function (data) {
                alertify.warning(data + ' disconnected');
            });
            socket.on('connected', function (data) {
                console.log(data);
            });

            socket.on('score_update', function (data) {
                $('#submit-score-button').prop('disabled', false);

                // Set the global leg object
                leg = data.leg;
                scores = {};

                $('#round-number').text('R' + (Math.floor(leg.visits.length / leg.players.length) + 1));

                // Set updated score per player
                var currentPlayerId = leg.current_player_id;
                var players = data.players;
                var totalFishNChips = 0;
                var isLastVisitFishNChips = false;
                for (var i = 0; i < players.length; i++) {
                    var player = players[i];

                    var playerScoreCard = $('#scorecard-player-' + player.player_id);
                    var scoreContainer = $('#player-score-' + player.player_id);
                    var visitContainer = $('#player-visit-' + player.player_id);

                    scoreContainer.text(player.current_score);

                    if (player.player_id === currentPlayerId) {
                        playerScoreCard.removeClass().addClass('scorecard scorecard-active');
                        visitContainer.removeClass().addClass('visits-active');

                        isLastVisitFishNChips = players[i === 0 ?  players.length - 1 : i - 1].modifiers.is_fish_and_chips;

                        $('#submit-score-button').data('current-player-id', player.player_id);
                    }
                    else {
                        playerScoreCard.removeClass().addClass('scorecard-inactive');
                        visitContainer.removeClass().addClass('visits-inactive');
                    }

                    totalFishNChips += player.visit_statistics.fish_and_chips_counter;
                }
                if (isLastVisitFishNChips) {
                    var msg = alertify.notify('<h4>Fish & Chips:</h4><h3>' + (totalFishNChips - 1) + '</h3>', 'fish-n-chips', 5, function(){  });
                    var interval = setInterval(function(){
                        msg.setContent('<h4>Fish & Chips:</h4><h3>' + totalFishNChips + '</h3>');
                    }, 1000);
                }

                $('.visits-active .total-score').html(0);
                resetElements();
            });

            var socket = getLegsNamespace(leg);

            $('#submit-score-button').click(function (event) {
                $(this).attr('disabled', true);

                var firstScore = getActiveVisitDartScore(1);
                var firstMultiplier = getActiveVisitDartMultiplier(1);
                var secondScore = getActiveVisitDartScore(2);
                var secondMultiplier = getActiveVisitDartMultiplier(2);
                var thirdScore = getActiveVisitDartScore(3)
                var thirdMultiplier =  getActiveVisitDartMultiplier(3);

                var total = firstScore * firstMultiplier + secondScore * secondMultiplier + thirdScore * thirdMultiplier;

                var currentPlayerId = $(this).data('current-player-id');
                var data = JSON.stringify({
                    leg_id: legId,
                    player_id: currentPlayerId,
                    first_dart: { value: firstScore, multiplier: firstMultiplier },
                    second_dart: { value: secondScore, multiplier: secondMultiplier },
                    third_dart: { value: thirdScore, multiplier: thirdMultiplier }
                });

                var isFinished = $(this).data('finished');
                var isBust = $(this).data('busted');
                if (isFinished) {
                    responsiveVoice.speak("Game shot!", VOICE);
                    executePost(window.location.origin + '/legs/' + legId + '/finish', data, 'application/json',
                        function (response) {
                            location.href = window.location.origin + '/legs/' + legId + '/result';
                        },
                        function (error) {
                            console.log("Unable to proceed: " + error.responseText);
                        }
                    )
                }
                else {
                    if (isBust) {
                        responsiveVoice.speak("Noscore", VOICE, { pitch: 0.8 });
                    }
                    else {
                        responsiveVoice.speak("" + total, VOICE);
                    }
                    socket.emit('throw', data);
                }
                event.preventDefault();
            });

            $('#toggle-buttons').click(function () {
                $('#score-selector-table').toggle();
            });

            // Click button
            $('#score-selector-table .throw-buttons :button').click(function () {
                // Returns active player's current dart container
                var dart = getCurrentDartContainer(currentDart);
                // Handle empty
                if (dart === null) {
                    alert('Please submit previous score!');
                    return;
                }
                // Get multiplier and score from pressed button
                var multiplier = $(this).data('multiplier');
                var score = $(this).attr('title');

                setCurrentDartContainerValues(dart, score, multiplier);

                var scoreNumeric = parseInt(score);
                checkVisitFinished(dart, scoreNumeric);

                // Remove focus from the button incase keyboard is used to enter next score
                $(this).blur();
            });

            $('#undo-button').click(function () {
                if (currentDart <= 1) {
                    disableEnter = true;
                    showConfirm('Delete last Visit', function() {
                        socket.emit('undo_visit', { });
                    }, function(){ /* NOOP */ });
                    return;
                }
                var playerId = $('#submit-score-button').data('current-player-id');
                var currentPlayerScore = parseInt($('.current-player').text());
                currentDart--;
                var lastScore = scores[currentDart];
                updatePlayerScore(-lastScore);
                updateTotalVisitScore(-lastScore);
                delete scores[currentDart]

                // Emit a undo throw to spectators
                socket.emit('undo_throw', {
                        current_player_id: playerId,
                        score: -lastScore,
                        dart_text: '',
                        multiplier: 1,
                        is_bust: false,
                        is_finished: false,
                        is_undo: true,
                        darts_thrown: currentDart
                });

                var dart = getCurrentDartContainer(currentDart);
                clearDart(dart);

                // Remove focus from the button incase keyboard is used to enter next score
                $(this).blur();
            });

            $('#btn-change-player-order').click(function() {
                $('#modal-player-selector').modal({ show: true, keyboard: false, backdrop: 'static' });
            });

            // If this is an official match, which has not had any darts thrown, and was not updated in the last two minutes
            // show the dialog to set player order
            var lastUpdated = moment.duration(moment().diff(moment(leg.updated_at))).asMinutes().toFixed();
            if (match.tournament_id && leg.visits.length === 0 && lastUpdated > 2) {
                $('#btn-change-player-order').trigger('click');
            }

            $('#edit-scores-button').click(function () {
                location.href = '/legs/' + legId + '/result';
            });

            $('#cancel-leg-button').click(function () {
                showConfirm('Leg will be cancelled.', function() {
                    executeDelete('/legs/' + legId + '/cancel',
                        function (response) {
                            location.href = '/matches';
                        },
                        function (error) {
                            var alert = $('#cancel-leg-failed-alert');
                            alert.show();
                            alert.text('Unable to cancel leg, see log for details (' + error.statusText + ')');
                        }
                    );
                }, function(){ /* NOOP */ });
            });
        });

        function resetElements() {
            currentDart = 1;
            $('.visits-active .first').text('')
                .removeClass('dart-score-single dart-score-double dart-score-triple');
            $('.visits-active .first').removeAttr('data-score');
            $('.visits-active .first').attr('data-multiplier', 1);
            $('.visits-active .first').attr('data-checkout', 0);

            $('.visits-active .second').text('')
                .removeClass('dart-score-single dart-score-double dart-score-triple');
            $('.visits-active .second').removeAttr('data-score');
            $('.visits-active .second').attr('data-multiplier', 1);
            $('.visits-active .second').attr('data-checkout', 0);

            $('.visits-active .third').text('')
                .removeClass('dart-score-single dart-score-double dart-score-triple');
            $('.visits-active .third').removeAttr('data-score');
            $('.visits-active .third').attr('data-multiplier', 1);
            $('.visits-active .third').attr('data-checkout', 0);

            //$('.visits-inactive .first').css('background-color', '#a9a9a9');
            //$('.visits-inactive .second').css('background-color', '#a9a9a9');
            //$('.visits-inactive .third').css('background-color', '#a9a9a9');

            $('#submit-score-button').data('busted', 0);
            $('#submit-score-button').data('finished', 0);
        }

        function clearDart(dart) {
            dart.text('');
            dart.attr('data-score', 0);
            dart.attr('data-multiplier', 1);
            dart.removeClass('dart-score-single dart-score-double dart-score-triple');
            dart.removeAttr('data-score');
        }

block content
    - var round_number = Math.floor(leg.visits.length / leg.players.length) + 1;
    div(id='cancel-leg-failed-alert' class='alert alert-danger' role='alert' hidden='true').
        Unable to cancel leg

    div(class='pt-20')
    div(class='block-container-blue' style='overflow: visible;')
        div(class='float-left font-24')= 'Leg (X01) '
        div(class='float-left font-24 pl-10')= match.match_mode.short_name + '/'
        div(class='float-left font-24')= 'R' + round_number
        div(class='float-right')
            div(class='btn-group')
                button(type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false') Options&nbsp;&nbsp;
                    span(class='caret')
                    span(class='sr-only')
                ul(class='dropdown-menu')
                    block advanced_options
                        li: a(id='edit-scores-button') Edit scores
                        li: a(id='btn-change-player-order') Change Order
                        li: a(id='toggle-buttons') Toggle buttons
                        li: a(id='btn-open-chat') Open Chat
                        li(role='separator' class='divider')
                        li: a(id='cancel-leg-button') Cancel Leg

            div(class='btn-group')
                ul(class='dropdown-menu')
                    block advanced_options
        div(style='clear: both;')

    block score_header
        div
            table(id='scores-table')
                tbody
                    tr
                        each player in leg_players
                            - var playerId = player.player_id;
                            - var clazz = player.is_current_player ? 'scorecard scorecard-active' : 'scorecard scorecard-inactive'
                            td
                                div(class=clazz id='scorecard-player-' + playerId)
                                    div(id='player-name-' + playerId class='label-player-name')= players[playerId].name
                                    div(id='player-score-' + playerId class='label label-block label-player-score')= player.current_score

                                    div(id='player-legs-' + player.player_id class='player-legs')
                                        label= (player.wins ? player.wins : '0')
                    tr
                        each player in leg_players
                            - var clazz = player.is_current_player ? 'visits-active' : 'visits-inactive'
                                td(id='player-visit-' + player.player_id class=clazz)
                                    table(style='width: 100%; table-layout: fixed;')
                                        tbody
                                            tr
                                                td
                                                    div(class='dart-score')
                                                        div(class='first' data-multiplier='1') &nbsp;
                                                td
                                                    div(class='dart-score')
                                                        div(class='second' data-multiplier='1') &nbsp;
                                                td
                                                    div(class='dart-score')
                                                        div(class='third' data-multiplier='1') &nbsp;
                                            tr
                                                td(style='padding: 3px;')
                                            tr
                                                td(colspan='3')
                                                    div(class='total-score')= 0

    div(class='table-responsive')
        table(id='score-selector-table' class='table' style='display: none;')
            tbody
                tr(class='row')
                    td(colspan='9' class='no-border')
                    td(colspan='2')
                        button(id='submit-score-button' type='button' style='line-height:1.7' class='needsclick btn-score btn-info btn-lg btn-block' data-leg-id=leg.id data-current-player-id=leg.current_player_id data-players-in-leg=leg.player2leg data-busted='0' data-finished='0') Submit
                    td(colspan='2')
                        button(id='undo-button' type='button' class='btn-score btn-info btn-lg btn-block')
                            span(class='glyphicon glyphicon-arrow-left' style='line-height:1.7' aria-hidden='true')

                block score_selector
                    mixin score_button(value, multiplier, text, custom_class)
                        - var score_button_class = 'btn-score btn-info btn-lg btn-block'
                        if custom_class
                            - score_button_class += ' ' + custom_class
                        else if multiplier === 3
                            - score_button_class += ' btn-triple'
                        else if multiplier === 2
                            - score_button_class += ' btn-double'
                        - text = text === undefined ? value : text;
                        button(type='button' class=score_button_class title=value * multiplier data-multiplier=multiplier)!= text + '<br>' + '.'.repeat(multiplier)

                    mixin button_row(values)
                        //- Mixin to generate each row of single, double and tripple buttons
                        for value in values
                            td: +score_button(value, 1)
                        for value in values
                            td: +score_button(value, 2)
                        for value in values
                            td: +score_button(value, 3)

                    tr(class='throw-buttons row')
                        td: +score_button(0, 1, 'Miss')
                        +button_row([ 20, 19, 18, 17 ])
                    tr(class='throw-buttons row')
                        td(rowspan='2' class='btn-double' style='height:100%;')
                            +score_button(25, 1, 'Bull', 'btn-double')
                        +button_row([ 16, 15, 14, 13 ])
                    tr(class='throw-buttons row')
                        +button_row([ 12, 11, 10, 9 ])
                    tr(class='throw-buttons row')
                        td(rowspan='2' class='btn-triple' style='height:100%;')
                            +score_button(25, 2, 'Bull', 'btn-triple')
                        +button_row([ 8, 7, 6, 5 ])
                    tr(class='throw-buttons row')
                        +button_row([ 4, 3, 2, 1 ])

    //- Spectator chat
    include ../chat/chat.pug

    +player_order(leg_players)
