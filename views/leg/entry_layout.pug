extends ../layout.pug

include ../mixins/score_header.pug

block scripts
    script(src='/javascripts/fastclick-1.0.6.min.js')
    script(src='/javascripts/socket.io-2.0.3.min.js')
    script
        include socketio_helper.js
    script.
        var scores = {};
        var leg = !{JSON.stringify(leg)}
        var legId = leg.id

        var currentDart = 1;

        function getCurrentDart() {
            var dart;
            if (currentDart === 1) {
                dart = $('.uv-active-player-visits .first');
            }
            else if (currentDart === 2) {
                dart = $('.uv-active-player-visits .second');
            }
            else if (currentDart === 3) {
                dart = $('.uv-active-player-visits .third');
            }
            else {
                return null;
            }
            return dart;
        }

        function updateTotalVisitScore(score) {
            var totalScoreContainer = $('.uv-active-player-visits .dart-score-total');
            var total = parseInt(totalScoreContainer.html()) + parseInt(score);
            totalScoreContainer.html(total);
        }

        function setDartValue(dart, score, multiplier) {
            var scoreInt = parseInt(score);
            var dartText = score

            if (scoreInt === 0 ) {
                multiplier = 1;
                currentMultiplier = 1;
                score = 0;
            }

            if (multiplier == 3) {
                dartText = 'T-' + score / multiplier;
                dart.removeClass('dart-score-single dart-score-double').addClass('dart-score-triple');
            }
            else if (multiplier == 2) {
                dartText = 'D-' + score / multiplier;
                dart.removeClass('dart-score-single dart-score-triple').addClass('dart-score-double');
            }
            else if (score === 0) {
                dartText = 'Miss';
                dart.removeClass('dart-score-double dart-score-triple').addClass('dart-score-single');
            }
            else {
                dart.removeClass('dart-score-double dart-score-triple').addClass('dart-score-single');
            }
            dart.text(dartText);
            dart.attr('data-score', score / multiplier);
            dart.attr('data-multiplier', multiplier);

            updateTotalVisitScore(score)
            scores[currentDart] = scoreInt;
        }

        function resetUIelements() {
            currentDart = 1;
            $('.uv-active-player-visits .first').text('')
                .removeClass('dart-score-single dart-score-double dart-score-triple');
            $('.uv-active-player-visits .first').removeAttr('data-score');
            $('.uv-active-player-visits .first').attr('data-multiplier', 1);
            $('.uv-active-player-visits .first').attr('data-checkout', 0);

            $('.uv-active-player-visits .second').text('')
                .removeClass('dart-score-single dart-score-double dart-score-triple');
            $('.uv-active-player-visits .second').removeAttr('data-score');
            $('.uv-active-player-visits .second').attr('data-multiplier', 1);
            $('.uv-active-player-visits .second').attr('data-checkout', 0);

            $('.uv-active-player-visits .third').text('')
                .removeClass('dart-score-single dart-score-double dart-score-triple');
            $('.uv-active-player-visits .third').removeAttr('data-score');
            $('.uv-active-player-visits .third').attr('data-multiplier', 1);
            $('.uv-active-player-visits .third').attr('data-checkout', 0);

            $('#submit-score-button').data('busted', 0);
            $('#submit-score-button').data('finished', 0);
        }

        function clearDart(dart) {
            dart.text('');
            dart.attr('data-score', 0);
            dart.attr('data-multiplier', 1);
            dart.removeClass('dart-score-single dart-score-double dart-score-triple');
            dart.removeAttr('data-score');
        }

        $(function () {
            FastClick.attach(document.body);

            var isDualMonitor = window.innerWidth > 1920;

            if (isDualMonitor) {
                // Move header when dual monitors
                $('#td-round-header').attr('style', 'text-align: right; padding-right: 19em;');
            }

            if (leg.is_finished) {
                return;
            }
            var socket = getLegsNamespace(leg);
            socket.on('spectator_connected', function (data) {
                alertify.success(data + ' connected');
            });
            socket.on('spectator_disconnected', function (data) {
                alertify.warning(data + ' disconnected');
            });
            socket.on('connected', function (data) {
                console.log(data);
            });
            socket.on('score_update', function (data) {
                $('#submit-score-button').prop('disabled', false);

                // Set the global leg object
                leg = data.leg;
                scores = {};

                $('#round-number').text('R' + (Math.floor(leg.visits.length / leg.players.length) + 1));

                // Set updated score per player
                var currentPlayerId = leg.current_player_id;
                var players = data.players;
                for (var i = 0; i < players.length; i++) {
                    var player = players[i];
                    var td = $('#player-score-' + player.player_id);
                    var tdLegs = $('#player-legs-' + player.player_id);
                    var tdVisit = $('#player-visit-' + player.player_id);
                    var label = td.find('.label-player-score');
                    label.text(player.current_score);

                    if (player.player_id === currentPlayerId) {
                        td.removeClass().addClass('uv-active-player-score');
                        tdLegs.removeClass().addClass('uv-active-player-legs');
                        tdVisit.removeClass().addClass('uv-active-player-visits');
                        $('#submit-score-button').data('current-player-id', player.player_id);
                        label.addClass('current-player');
                    }
                    else {
                        td.removeClass().addClass('uv-inactive-player-score');
                        tdLegs.removeClass().addClass('uv-inactive-player-legs');
                        tdVisit.removeClass().addClass('uv-inactive-player-visits');
                        label.removeClass('current-player');
                        label.removeAttr('data-current-player-id');

                        if (player.modifiers.is_vilius_visit) {
                            td.addClass('player-modifier-vilius');
                        }

                        if (player.modifiers.is_fish_and_chips) {
                            td.addClass('player-modifier-fish-n-chips');
                        }
                    }
                    if (player.modifiers.is_beer_match) {
                        td.addClass('player-modifier-beer');
                    }
                }

                // Move header when dual monitors
                console.log('isDualMonitor: ' + isDualMonitor + ', size: ' + window.innerWidth + 'x' + window.innerHeight);
                if (isDualMonitor) {
                    if (players[0].player_id === currentPlayerId) {
                        $('#td-round-header').attr('style', 'text-align: left; padding-left: 19em;');
                    } else {
                        $('#td-round-header').attr('style', 'text-align: right; padding-right: 19em;');
                    }
                }

                $('.uv-active-player-visits .dart-score-total').html(0);
                resetUIelements();
            });
        });

        $(function () {
            var socket = getLegsNamespace(leg);

            $('#submit-score-button').click(function (event) {
                $(this).attr('disabled', true);

                var firstScore = parseInt($('.uv-active-player-visits .first').attr('data-score'));
                var firstMultiplier = parseInt($('.uv-active-player-visits .first').attr('data-multiplier'));
                var secondScore = parseInt($('.uv-active-player-visits .second').attr('data-score'));
                var secondMultiplier = parseInt($('.uv-active-player-visits .second').attr('data-multiplier'));
                var thirdScore = parseInt($('.uv-active-player-visits .third').attr('data-score'));
                var thirdMultiplier =  parseInt($('.uv-active-player-visits .third').attr('data-multiplier'));

                var currentPlayerId = $(this).data('current-player-id');
                var data = JSON.stringify({
                    leg_id: legId,
                    player_id: currentPlayerId,
                    first_dart: { value: firstScore, multiplier: firstMultiplier },
                    second_dart: { value: secondScore, multiplier: secondMultiplier },
                    third_dart: { value: thirdScore, multiplier: thirdMultiplier }
                });

                var isFinished = $(this).data('finished');
                if (isFinished) {
                    executePost(window.location.origin + '/legs/' + legId + '/finish', data, 'application/json',
                        function (response) {
                            location.href = window.location.origin + '/legs/' + legId + '/result';
                        },
                        function (error) {
                            console.log("Unable to proceed: " + error.responseText);
                        }
                    )
                }
                else {
                    socket.emit('throw', data);
                }
                event.preventDefault();
            });

            $('#toggle-buttons').click(function () {
                $('#score-selector-table').toggle();
            });

            $('#score-selector-table .throw-buttons :button').click(function () {
                var dart = getCurrentDart();
                if (dart === null) {
                    alert('Please submit previous score!');
                    return;
                }
                var multiplier = $(this).data('multiplier')
                var score = $(this).attr('title')
                setDartValue(dart, score, multiplier)

                var scoreNumeric = parseInt(score)
                checkVisitFinished(dart, scoreNumeric)

                // Remove focus from the button incase keyboard is used to enter next score
                $(this).blur();
            });

            $('#undo-button').click(function () {
                if (currentDart <= 1) {
                    return;
                }
                var playerId = $('#submit-score-button').data('current-player-id');
                var currentPlayerScore = parseInt($('.current-player').text());
                currentDart--;
                var lastScore = scores[currentDart];
                updatePlayerScore(-lastScore);
                updateTotalVisitScore(-lastScore);
                delete scores[currentDart]

                // Emit a undo throw to spectators
                socket.emit('undo_throw', {
                        current_player_id: playerId,
                        score: -lastScore,
                        dart_text: '',
                        multiplier: 1,
                        is_bust: false,
                        is_finished: false,
                        is_undo: true,
                        darts_thrown: currentDart
                });

                var dart = getCurrentDart();
                clearDart(dart);

                // Remove focus from the button incase keyboard is used to enter next score
                $(this).blur();
            });

            $('#edit-scores-button').click(function () {
                location.href = '/legs/' + legId + '/result';
            });

            $('#cancel-leg-button').click(function () {
                showConfirm('Leg will be cancelled.', function() {
                    executeDelete('/legs/' + legId + '/cancel',
                        function (response) {
                            location.href = '/matches';
                        },
                        function (error) {
                            var alert = $('#cancel-leg-failed-alert');
                            alert.show();
                            alert.text('Unable to cancel leg, see log for details (' + error.statusText + ')');
                        }
                    );
                }, function(){ /* NOOP */ });
            });
        });

    block script_check_visit_finished
        script.
            function updatePlayerScore(score) {
                var currentPlayer = $('.current-player');
                var currentScore = parseInt(currentPlayer.text());
                currentPlayer.text(currentScore - score);
            }

            function checkVisitFinished(dart, scoreNumeric) {
                var isBust = false;
                var isFinished = false;

                var currentPlayer = $('.current-player');
                var currentPlayerScore = parseInt(currentPlayer.text());
                var currentPlayerId = $('#submit-score-button').data('current-player-id');

                var scoreAfterThrow = parseInt(currentPlayerScore - scoreNumeric);
                if (scoreAfterThrow == 0) {
                    if (dart.attr('data-multiplier') == 2) {
                        disableEnter = true;
                        currentDart++;
                        updatePlayerScore(scoreNumeric);
                        socket.emit('possible_throw', {
                                current_player_id: currentPlayerId,
                                score: scoreNumeric,
                                dart_text: dart.text(),
                                multiplier: dart.attr('data-multiplier'),
                                is_bust: isBust,
                                is_finished: isFinished,
                                darts_thrown: currentDart - 1
                        });
                        showConfirm('Leg will be finished.', function() {
                            socket.emit('possible_throw', {
                                    current_player_id: currentPlayerId,
                                    is_finished: true
                            });
                            // End leg, 'click' submit
                            $('#submit-score-button').data('finished', 1).trigger('click');
                        }, function(){
                            $('#undo-button').trigger('click');
                        });
                        // Return so we don't trigger any code checking for bust
                        return;
                    }
                    else {
                        isBust = true;
                    }
                }
                else if (scoreAfterThrow <= 1) {
                    isBust = true;
                }

                if (isBust) {
                    disableEnter = true;
                    socket.emit('possible_throw', {
                            current_player_id: currentPlayerId,
                            score: scoreNumeric,
                            dart_text: dart.text(),
                            multiplier: dart.attr('data-multiplier'),
                            is_bust: isBust,
                            is_finished: isFinished,
                            darts_thrown: currentDart
                    });
                    showConfirm('Player busted', function() {
                        // Emit a dart throw for spectators
                        alertify.success('Player busted');
                        $('#submit-score-button').data('busted', 1).trigger('click');
                    }, function(){
                        // Clear the score for thrown dart
                        $('#undo-button').trigger('click');
                    });
                }
                else {
                    // Emit a dart throw for spectators
                    this.socket.emit('possible_throw', {
                            current_player_id: currentPlayerId,
                            score: scoreNumeric,
                            dart_text: dart.text(),
                            multiplier: dart.attr('data-multiplier'),
                            is_bust: isBust,
                            is_finished: isFinished,
                            darts_thrown: currentDart
                    });
                }
                currentDart++;
                updatePlayerScore(scoreNumeric);
            }


block content
    div(id='cancel-leg-failed-alert' class='alert alert-danger' role='alert' hidden='true').
        Unable to cancel leg
    block title

    - var round_number = Math.floor(leg.visits.length / leg.players.length) + 1;
    +get_score_header(match.match_mode, round_number, leg_players, match.tournament_id != null, true)

    div(class='table-responsive')
        table(id='score-selector-table' class='table' style='display: none;')
            tbody
                tr(class='row')
                    td(colspan='9' class='no-border')
                    td(colspan='2')
                        button(id='submit-score-button' type='button' style='line-height:1.7' class='needsclick btn-score btn-info btn-lg btn-block' data-leg-id=leg.id data-current-player-id=leg.current_player_id data-players-in-leg=leg.player2leg data-busted='0' data-finished='0') Submit
                    td(colspan='2')
                        button(id='undo-button' type='button' class='btn-score btn-info btn-lg btn-block')
                            span(class='glyphicon glyphicon-arrow-left' style='line-height:1.7' aria-hidden='true')

                block score_selector
                    mixin score_button(value, multiplier, text, custom_class)
                        - var score_button_class = 'btn-score btn-info btn-lg btn-block'
                        if custom_class
                            - score_button_class += ' ' + custom_class
                        else if multiplier === 3
                            - score_button_class += ' btn-triple'
                        else if multiplier === 2
                            - score_button_class += ' btn-double'
                        - text = text === undefined ? value : text;
                        button(type='button' class=score_button_class title=value * multiplier data-multiplier=multiplier)!= text + '<br>' + '.'.repeat(multiplier)

                    mixin button_row(values)
                        //- Mixin to generate each row of single, double and tripple buttons
                        for value in values
                            td: +score_button(value, 1)
                        for value in values
                            td: +score_button(value, 2)
                        for value in values
                            td: +score_button(value, 3)

                    tr(class='throw-buttons row')
                        td: +score_button(0, 1, 'Miss')
                        +button_row([ 20, 19, 18, 17 ])
                    tr(class='throw-buttons row')
                        td(rowspan='2' class='btn-double' style='height:100%;')
                            +score_button(25, 1, 'Bull', 'btn-double')
                        +button_row([ 16, 15, 14, 13 ])
                    tr(class='throw-buttons row')
                        +button_row([ 12, 11, 10, 9 ])
                    tr(class='throw-buttons row')
                        td(rowspan='2' class='btn-triple' style='height:100%;')
                            +score_button(25, 2, 'Bull', 'btn-triple')
                        +button_row([ 8, 7, 6, 5 ])
                    tr(class='throw-buttons row')
                        +button_row([ 4, 3, 2, 1 ])

    div(class='btn-group')
        button(type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false') Options&nbsp;&nbsp;
            span(class='caret')
            span(class='sr-only')
        ul(class='dropdown-menu')
            block advanced_options
                li: a(id='btn-open-chat') Open Chat
                li: a(id='toggle-buttons') Toggle buttons
                li: a(id='edit-scores-button') Edit scores
                li(role='separator' class='divider')
                li: a(id='cancel-leg-button') Cancel Leg

    div(class='btn-group')
        ul(class='dropdown-menu')
            block advanced_options

    //- Spectator chat
    include ../chat/chat.pug
