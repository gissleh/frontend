extends layout.pug

include mixins/dart.pug
include mixins/player.pug

block append head
    link(rel='stylesheet' type='text/css' href='/stylesheets/datatables-1.10.16.min.css')
    script(src='/javascripts/datatables-1.10.16.min.js')

    script(src='/javascripts/Chart.bundle-2.7.1.min.js')
    script(src='/javascripts/webgl-heatmap.js')
    script(src='/javascripts/jquery-ui.1.12.1.min.js')
    script(src='/javascripts/jquery.ui.touch-punch-0.2.3.min.js')
    script(src='/javascripts/moment-2.20.1.min.js')

block append scripts
    script
        include chart/chart_helper.js
    script.
        var leg = !{JSON.stringify(leg)}
        var match = !{JSON.stringify(match)}
        var legPlayers = !{JSON.stringify(leg_players)}
        var playersMap = !{JSON.stringify(players)}
        var visits = leg.visits;

        var chartMaxValue = match.match_type.id == 1 || match.match_type.id == 3 ? leg.starting_score : 0;
        var labels = [];
        var values = { }
        for (var i = 0; i < legPlayers.length; i++) {
            var player = legPlayers[i];
            var score = leg.starting_score + player.handicap
            values[player.player_id] = [ score ];
            if (score > chartMaxValue) {
                chartMaxValue = score;
            }
        }
        var round = 0;
        labels.push(round);

        for (var i = 0; i < visits.length; i++) {
            var visit = visits[i];
            if (i % legPlayers.length === 0) {
                round++;
                labels.push(round);
            }
            var current = values[visit.player_id][values[visit.player_id].length - 1];
            if (visit.is_bust) {
                values[visit.player_id].push(current);
            }
            else {
                var visitScore = ((visit.first_dart.value * visit.first_dart.multiplier) +
                    (visit.second_dart.value * visit.second_dart.multiplier) +
                    (visit.third_dart.value * visit.third_dart.multiplier))
                if (match.match_type.id == 2) {
                    current = current + visitScore
                    values[visit.player_id].push(current);
                    if (current > chartMaxValue) {
                        chartMaxValue = current;
                    }
                }
                else {
                    values[visit.player_id].push(current - visitScore);
                }
            }
        }

        $(function () {
            var datasets = []
            for (var i = 0; i < legPlayers.length; i++) {
                var player = playersMap[legPlayers[i].player_id];
                datasets.push({
                    label: player.name,
                    backgroundColor: player.color,
                    borderColor: player.color,
                    data: values[player.id],
                    fill: false
                });
            }
            var config = getChartConfig('Scores', 'line', 'Round', 'Scores', labels, datasets);
            config.options.scales.yAxes[0].ticks = { max: chartMaxValue, stepSize: 20, beginAtZero: true };
            var scoresChart = new Chart("canvas-scores", config);
        });
    script.
        var leg = !{JSON.stringify(leg)}

        $(document).keydown(function (e) {
            if (e.key == 'Enter') {
                $('#continue-match').trigger('click');
            }
        });

        $(function () {
            $('#leg-hits-table').DataTable({
                searching: false,
                bInfo : false,
                iDisplayLength: 50,
                order: [[ 1,  'desc' ]]
            });

            $('.edit-visit').click(function () {
                var visitNumber = $(this).data('visit');

                var firstDartField = $('#first-dart-visit-' + visitNumber);
                var secondDartField = $('#second-dart-visit-' + visitNumber);
                var thirdDartField = $('#third-dart-visit-' + visitNumber);

                var firstDartValue = firstDartField.data().score;
                var firstDartMultiplier = firstDartField.data().multiplier;
                var secondDartValue = secondDartField.data().score;
                var secondDartMultiplier = secondDartField.data().multiplier;
                var thirdDartValue = thirdDartField.data().score;
                var thirdDartMultiplier = thirdDartField.data().multiplier;

                var selector1 = $('#first-dart-visit-' + visitNumber + '-selector');
                var selector2 = $('#second-dart-visit-' + visitNumber + '-selector');
                var selector3 = $('#third-dart-visit-' + visitNumber + '-selector');

                var firstDartLabel = $('#first-dart-visit-' + visitNumber + '-label');
                var secondDartLabel = $('#second-dart-visit-' + visitNumber + '-label');
                var thirdDartLabel = $('#third-dart-visit-' + visitNumber + '-label');

                if ($(this).data('issave') == 1) {
                    var newFirstDart = selector1.val().split('-');
                    var newSecondDart = selector2.val().split('-');
                    var newThirdDart = selector3.val().split('-');

                    var firstScoreChanged = newFirstDart[1];
                    var secondScoreChanged = newSecondDart[1];
                    var thirdScoreChanged = newThirdDart[1];

                    var firstMultiplierChanged = newFirstDart[0];
                    var secondMultiplierChanged = newSecondDart[0];
                    var thirdMultiplierChanged = newThirdDart[0];

                    firstDartField.data('score', firstScoreChanged);
                    firstDartField.data('multiplier', firstMultiplierChanged);
                    secondDartField.data('score', secondScoreChanged);
                    secondDartField.data('multiplier', secondMultiplierChanged);
                    thirdDartField.data('score', thirdScoreChanged);
                    thirdDartField.data('multiplier', thirdMultiplierChanged);

                    // Save the data
                    var data = JSON.stringify({
                        id: visitNumber,
                        leg_id: leg.id,
                        first_dart: { value: parseInt(firstScoreChanged), multiplier: parseInt(firstMultiplierChanged) },
                        second_dart: { value: parseInt(secondScoreChanged), multiplier: parseInt(secondMultiplierChanged) },
                        third_dart: { value: parseInt(thirdScoreChanged), multiplier: parseInt(thirdMultiplierChanged) }
                    });
                    $(this).children('span').removeClass('glyphicon-floppy-disk').addClass('glyphicon-edit');
                    $(this).data('issave', 0);

                    /// Depending on the data-finished attribute of submit button, use different route and redirect
                    var route = window.location.pathname;
                    var routeRedirect = window.location.pathname;
                    executePost(route, data, 'application/json',
                        function (response) {
                            location.href = '/legs/' + leg.id;
                        },
                        function (error) {
                            alert("Error when updating score, please reload!");
                            console.log("Unable to proceed: " + error.responseText);
                            location.reload();
                        }
                    )
                }
                else {
                    selector1.show();
                    selector2.show();
                    selector3.show();

                    selector1.val(firstDartMultiplier + "-" + firstDartValue);
                    selector2.val(secondDartMultiplier + "-" + secondDartValue);
                    selector3.val(thirdDartMultiplier + "-" + thirdDartValue);

                    firstDartLabel.hide();
                    secondDartLabel.hide();
                    thirdDartLabel.hide();

                    $(this).children('span').removeClass('glyphicon-edit').addClass('glyphicon-floppy-disk');
                    $(this).data('issave', 1);
                }
            });

            $('.delete-visit').click(function () {
                var visitNumber = $(this).data('visit');
                showConfirm('Visit will be deleted.', function() {
                    executeDelete('/legs/' + leg.id + '/visit/' + visitNumber,
                        function (response) {
                            location.href = '/legs/' + leg.id;
                        },
                        function (error) {
                            alert('Error deleting score. Please reload');
                            console.log("Unable to proceed: " + error.responseText);
                            location.reload();
                        }
                    );
                }, function(){ /* NOOP */ });
            });

            $('#change-order-button').click(function (e) {
                var players = $('.form-check-input');
                var order = {};
                for (var i = 0; i < players.length; i++) {
                    order[players[i].value] = i + 1;
                }
                executePut(window.origin + '/legs/' + leg.id + '/order', JSON.stringify(order), 'application/json', function() {
                    location.href = '/legs/' + leg.id;
                },
                function(error) {
                    alert('Error changing player order. Please reload');
                    console.log(error);
                    location.reload();
                });
            });

            $('#player-order-list').sortable();
            $('#player-order-list').disableSelection();

            $('#continue-match').click(function () {
                location.href = '/matches/' + $(this).data('match');
            });
            $('#back-to-match').click(function () {
                location.href = '/matches/' + $(this).data('match') + '/result';
            });

            $('.glyphicon-user').click(function(){
                location.href = '/players/' + $(this).data('player') + '/statistics'
            });

            $('#button-rematch').click(function () {
                executePost('/matches/' + leg.match_id + '/rematch', null, 'application/json',
                    function (response) {
                        location.href = '/legs/' + response.current_leg_id
                    },
                    function (error) {
                        alert('Unable to undo leg, see log for details (' + error.statusText + ')');
                    }
                );
            });

            $('#button-undo-finish').click(function () {
                showConfirm('Leg will no longer be finalized', function() {
                    executePut('/legs/' + leg.id + '/undo', null, 'application/json',
                        function (response) {
                            location.href = '/legs/' + leg.id;
                        },
                        function (error) {
                            alert('Unable to undo leg, see log for details (' + error.statusText + ')');
                        }
                    );
                }, function(){ /* NOOP */ });
            });
        });
    script.
        var scoresMap = !{JSON.stringify(leg.hits)};
        $(function () {
            var canvas = $('#dartboard-heatmap')[0];
            drawHeatmap(canvas, scoresMap, 0, 20, 20, 50);
            $("#heatmap-value-selector").change(function () {
                drawHeatmap(canvas, scoresMap, this.value, 20, 20, 50);
            });

            $('#btn-collapse-visits').click(function () {
                if ($('#visits-div').hasClass('in')) {
                    $('#btn-collapse-visits').text('Show Visits');
                } else {
                    $('#btn-collapse-visits').text('Hide Visits');
                }
            });
            $('#btn-collapse-heatmap').click(function () {
                if ($('#heatmap-div').hasClass('in')) {
                    $('#btn-collapse-heatmap').text('Show Heatmap');
                } else {
                    $('#btn-collapse-heatmap').text('Hide Heatmap');
                }
            });
            $('#btn-collapse-hits').click(function () {
                if ($('#hits-div').hasClass('in')) {
                    $('#btn-collapse-hits').text('Show Hits');
                } else {
                    $('#btn-collapse-hits').text('Hide Hits');
                }
            });
            $('#btn-collapse-checkouts').click(function () {
                if ($('#checkouts-div').hasClass('in')) {
                    $('#btn-collapse-checkouts').text('Show Checkouts');
                } else {
                    $('#btn-collapse-checkouts').text('Hide Checkouts');
                }
            });
            $('#heatmap-div').on('shown.bs.collapse', function() {
                drawHeatmap(canvas, scoresMap, 0, 20, 20, 50);
            });
        });

block content
    - var isMatchFinished = match.is_finished
    - var isFinished = leg.winner_player_id !== null
    div(class='pt-20')
    div(class='block-container') 
        div(class='container-info-icon')
            i(class="fas fa-crosshairs")
        div(class='float-left pl-20')
            h3 Leg Result (#{leg.id})
            div
                div(class='float-left' style='width: 250px;')
                    p(style='padding-top: 5px;')
                        i(class="fas fa-clock") 
                        span(class='ml-5') Started #{moment(leg.created_at).format('YYYY-MM-DD HH:mm:ss')}
                    p(style='padding-top: 3px;')
                        i(class="fas fa-clock") 
                        span(class='ml-5') Finished #{leg.end_time === null ? '' : moment(leg.end_time).format('YYYY-MM-DD HH:mm:ss')}
                div(class='float-left' style='width: 250px;')
                    p(style='padding-top: 3px;')
                        i(class="fas fa-bullseye") 
                        span(class='ml-5') Duration #{leg.end_time === null ? '' : moment.duration(moment(leg.end_time).diff(leg.visits[0].created_at)).asMinutes().toFixed() + ' minutes'}
                    p(style='padding-top: 3px;')
                        i(class="fas fa-play") 
                        span(class='ml-5') Rounds: #{Math.ceil(leg.visits.length / leg.players.length)}
            div(style='clear: both; padding-top: 5px; color: #c7c7c7;')
                p Starting score was #{leg.starting_score}, and a total of #{leg.darts_thrown ? leg.darts_thrown : 0} darts were thrown by #{leg.players.length} players

    div(class='block-container-options' style='overflow: visible;') 
        div(class='float-left')
            ul(class='nav nav-pills')
                li(role='presentation' class='active'): a(href='#summary' data-toggle='tab') Summary
                li(role='presentation'): a(href='#visits' data-toggle='tab') Visits
                li(role='presentation'): a(href='#stats' data-toggle='tab') Stats
        div(style='float: right; padding-top: 4px;')
            ul(class='nav nav-pills')
                li(role='presentation'): a(id='button-rematch') Rematch
                li(role='presentation'): a(id='button-undo-finish') Undo leg finish
                li(role='presentation'): a(id='back-to-match' data-match=leg.match_id) Match results
                if !isMatchFinished
                    li(role='presentation' class='active'): a(id='continue-match' data-match=match.id) Continue match
        div(style='clear: both;')
                
    div(class='tab-content')
        div(role='tabpanel' id='summary' class='tab-pane active') 
            if isFinished
                table(style='width: 100%; table-layout: fixed;')
                    tbody
                        tr
                            each statistic in stats
                                - var player = players[statistic.player_id]
                                td(class='text-center' style='padding: 10px;')
                                    div
                                        - var dartsThrown = 0
                                        - var isWinner = statistic.player_id === leg.winner_player_id
                                        +player_summary_card(player, statistic, isWinner, statistic.darts_thrown, player.starting_score)

        div(role='tabpanel' id='visits' class='tab-pane') 
            div(class='block-container no-padding')
                table(class='table' id='table-leg-visits')
                    thead
                        tr
                            th Player
                            th(class='text-center') First Dart
                            th(class='text-center') Second Dart
                            th(class='text-center') Third Dart
                            th(class='text-center') Total
                            th(class='text-center') Remaining
                            th(class='text-center') Thrown
                            th(class='text-center') PPD
                            if !isFinished
                                th(class='text-center') Options
                    tbody
                        each visit in leg.visits
                            - var visit_score = (visit.first_dart.value * visit.first_dart.multiplier) + (visit.second_dart.value * visit.second_dart.multiplier) + (visit.third_dart.value * visit.third_dart.multiplier)
                            tr(id='visit-' + visit.id)
                                td= players[visit.player_id].name

                                +dart_container(visit.first_dart.value, visit.first_dart.multiplier, 'first-dart-visit-' + visit.id, true)
                                +dart_container(visit.second_dart.value, visit.second_dart.multiplier, 'second-dart-visit-' + visit.id, true)
                                +dart_container(visit.third_dart.value, visit.third_dart.multiplier, 'third-dart-visit-' + visit.id, true)

                                td(class='text-center total-visit-score-' + visit.id): label= visit_score
                                td(class='text-center'): label= visit.scores
                                td(class='text-center')= visit.darts_thrown
                                td(class='text-center visit-ppd-' + visit.id)= (visit_score / 3).toFixed(2)
                                if !isFinished
                                    td(class='text-center')
                                        button(type="button" class="btn btn-default edit-visit" data-visit=visit.id data-issave='0')
                                            span(class="glyphicon glyphicon-edit" aria-hidden="true")
                                        button(type="button" class="btn btn-default delete-visit" data-visit=visit.id)
                                            span(class="glyphicon glyphicon-trash" aria-hidden="true")


        div(role='tabpanel' id='stats' class='tab-pane') 
            div(style='float: left; width: 61%;')
                div(class='block-container-header')= 'Checkout attempts'
                div(class='block-container')
                    - var checkouts = leg.checkout_statistics
                    if checkouts.checkout_attempts
                        div
                            div(class='table-responsive')
                                table(id='table-leg-checkouts' class='table')
                                    thead
                                        tr
                                            th Dart
                                            th(class='text-center') Count
                                            th(class='text-center') Attempt %
                                            th(class='text-center') Actual
                                    tbody
                                        each count, value in checkouts.checkout_attempts
                                            tr
                                                +dart_container(value / 2, 2)
                                                td(class='no-border text-center')= count
                                                td(class='no-border text-center')= (count * 100 / checkouts.count).toFixed(2) + '%'
                                                if value == checkouts.checkout
                                                    td(class='no-border text-center'): span(class='glyphicon glyphicon-ok' aria-hidden='true')
                                                else
                                                    td(class='no-border text-center')
            
            div(style='float: right; width: 37%;')
                div(class='block-container-header')= 'Hits'
                div(class='block-container-with-header')
                    div(id='hits-div')
                        div(class='table-responsive')
                            table(id='leg-hits-table' class='table')
                                thead
                                    tr
                                        th Dart
                                        th Count
                                        th Hit %
                                tbody
                                    each score, key in leg.hits
                                        each count, multiplier in leg.hits[key]
                                            if count !== 0
                                                tr
                                                    +dart_container(key, multiplier)
                                                    td(class='no-border text-center')= count
                                                    td(class='no-border text-center')= (count * 100 / leg.darts_thrown).toFixed(2) + '%'

            div(style='float: left; width: 61%;')
                div(class='block-container-header')= 'Scores'
                div(class='block-container')
                    canvas(id='canvas-scores')

    if !isFinished
        h3 Player Order
        div
            div(id='player-order-list')
                each id in leg.players
                    div(class='float-left')
                        input(style='display: none;' type='checkbox' class='form-check-input' id='checkbox-player-' + players[id].id value=players[id].id)
                        label(style='margin-left: 10px; width: 160px;' class='player-name-label form-check-label btn btn-warning' for='checkbox-player-' + players[id].id)= players[id].name
            button(type='submit' name='submit' style='margin-left: 10px' id='change-order-button' class='btn btn-primary') Change Order
