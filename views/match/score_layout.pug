extends ../layout.pug

block scripts
    script(src='/javascripts/fastclick-1.0.6.min.js')
    script(src='/javascripts/socket.io-2.0.3.min.js')
    script
        include socketio_helper.js
    script.
        var scores = {};
        var match = !{JSON.stringify(match)}
        var matchId = match.id

        var currentDart = 1;

        function getCurrentDart() {
            var dart;
            if (currentDart === 1) {
                dart = $('.uv-active-player-visits .first');
            }
            else if (currentDart === 2) {
                dart = $('.uv-active-player-visits .second');
            }
            else if (currentDart === 3) {
                dart = $('.uv-active-player-visits .third');
            }
            else {
                return null;
            }
            return dart;
        }

        function setDartValue(dart, score, multiplier) {
            var scoreInt = parseInt(score);
            var dartText = score

            if (scoreInt === 0 ) {
                multiplier = 1;
                currentMultiplier = 1;
                score = 0;
            }
            if (multiplier == 3) {
                dartText = 'T-' + score / multiplier;
                dart.removeClass('dart-score-single dart-score-double').addClass('dart-score-triple');
            }
            else if (multiplier == 2) {
                dartText = 'D-' + score / multiplier;
                dart.removeClass('dart-score-single dart-score-triple').addClass('dart-score-double');
            }
            else if (score === 0) {
                dartText = 'Miss';
                dart.removeClass('dart-score-double dart-score-triple').addClass('dart-score-single');
            }
            else {
                dart.removeClass('dart-score-double dart-score-triple').addClass('dart-score-single');
            }
            dart.text(dartText);
            dart.attr('data-score', score / multiplier);
            dart.attr('data-multiplier', multiplier);

            //currentMultiplier = multiplier;
            scores[currentDart] = scoreInt;
        }

        $(function () {
            FastClick.attach(document.body);

            var socket = setupSocketIO(matchId);
            $(document).scrollTop(170);

            $('#submit-score-button').click(function (event) {
                $(this).attr('disabled', true);

                var firstScore = parseInt($('.uv-active-player-visits .first').attr('data-score'));
                var firstMultiplier = parseInt($('.uv-active-player-visits .first').attr('data-multiplier'));
                var secondScore = parseInt($('.uv-active-player-visits .second').attr('data-score'));
                var secondMultiplier = parseInt($('.uv-active-player-visits .second').attr('data-multiplier'));
                var thirdScore = parseInt($('.uv-active-player-visits .third').attr('data-score'));
                var thirdMultiplier =  parseInt($('.uv-active-player-visits .third').attr('data-multiplier'));

                var currentPlayerId = $(this).data('current-player-id');
                var data = JSON.stringify({
                    match_id: matchId,
                    player_id: currentPlayerId,
                    first_dart: { value: firstScore, multiplier: firstMultiplier },
                    second_dart: { value: secondScore, multiplier: secondMultiplier },
                    third_dart: { value: thirdScore, multiplier: thirdMultiplier }
                });

                var isFinished = $(this).data('finished');
                if (isFinished) {
                    executePost(window.location.origin + '/matches/' + matchId + '/finish', data, 'application/json',
                        function (response) {
                            location.href = window.location.origin + '/matches/' + matchId + '/leg';
                        },
                        function (error) {
                            consol1e.log("Unable to proceed: " + error.responseText);
                        }
                    )
                }
                else {
                    socket.emit('throw', data);
                }
                event.preventDefault();
            });

            $('.toggle-buttons').click(function () {
                $('#score-selector-table').toggle();
            });

            $('#score-selector-table .throw-buttons :button').click(function () {
                var dart = getCurrentDart();
                if (dart === null) {
                    alert('Please submit previous score!');
                    return;
                }
                var multiplier = $(this).data('multiplier')
                var score = $(this).attr('title')
                setDartValue(dart, score, multiplier)

                var scoreNumeric = parseInt(score)
                checkVisitFinished(dart, scoreNumeric)
                currentDart++;
            });

            $('#undo-button').click(function () {
                if (currentDart <= 1) {
                    return;
                }
                var playerId = $('#submit-score-button').data('current-player-id');
                var currentPlayerScore = parseInt($('.current-player').text());
                currentDart--;
                var lastScore = scores[currentDart];
                updatePlayerScore(-lastScore);
                delete scores[currentDart]

                // Emit a undo throw to spectators
                socket.emit('undo_throw', {
                        current_player_id: playerId,
                        score: -lastScore,
                        dart_text: '',
                        multiplier: 1,
                        is_bust: false,
                        is_finished: false,
                        darts_thrown: currentDart + 1
                });

                var dart = getCurrentDart();
                dart.text('');
                dart.removeAttr('data-score');
            });

            $('#edit-scores-button').click(function () {
                location.href = '/matches/' + matchId + '/leg';
            });

            $('#cancel-match-button').click(function () {
                showConfirm('Game will be cancelled.', function() {
                    executeDelete('/matches/' + matchId + '/cancel',
                        function (response) {
                            location.href = '/games';
                        },
                        function (error) {
                            var alert = $('#cancel-match-failed-alert');
                            alert.show();
                            alert.text('Unable to cancel match, see log for details (' + error.statusText + ')');
                        }
                    );
                }, function(){ /* NOOP */ });
            });
        });

    block script_check_visit_finished
        script.
            function updatePlayerScore(score) {
                var currentPlayer = $('.current-player');
                var currentScore = parseInt(currentPlayer.text());
                currentPlayer.text(currentScore - score);
            }

            function checkVisitFinished(dart, scoreNumeric) {
                var isBust = false;
                var isFinished = false;

                var currentPlayer = $('.current-player');
                var currentPlayerScore = parseInt(currentPlayer.text());
                var currentPlayerId = $('#submit-score-button').data('current-player-id');

                var scoreAfterThrow = parseInt(currentPlayerScore - scoreNumeric);
                if (scoreAfterThrow == 0) {
                    if (dart.attr('data-multiplier') == 2) {
                        disableEnter = true;
                        showConfirm('Game will be finished.', function() {
                            isFinished = true;
                            socket.emit('possible_throw', {
                                    current_player_id: currentPlayerId,
                                    score: scoreNumeric,
                                    dart_text: dart.text(),
                                    multiplier: dart.attr('data-multiplier'),
                                    is_bust: isBust,
                                    is_finished: isFinished,
                                    darts_thrown: currentDart - 1
                            });

                            // End game, 'click' submit
                            $('#submit-score-button').data('finished', 1).trigger('click');
                        }, function(){
                            $('#undo-button').trigger('click');
                        });
                        return;
                    }
                    else {
                        isBust = true;
                    }
                }
                else if (scoreAfterThrow <= 1) {
                    isBust = true;
                }

                if (isBust) {
                    disableEnter = true;
                    showConfirm('Player busted', function() {
                        // Emit a dart throw for spectators
                        socket.emit('possible_throw', {
                                current_player_id: currentPlayerId,
                                score: scoreNumeric,
                                dart_text: dart.text(),
                                multiplier: dart.attr('data-multiplier'),
                                is_bust: isBust,
                                is_finished: isFinished,
                                darts_thrown: currentDart - 1
                        });
                        alertify.success('Player busted');
                        $('#submit-score-button').data('busted', 1).trigger('click');
                    }, function(){
                        // Clear the score for thrown dart
                        $('#undo-button').trigger('click');
                    });
                }
                else {
                    // Emit a dart throw for spectators
                    this.socket.emit('possible_throw', {
                            current_player_id: currentPlayerId,
                            score: scoreNumeric,
                            dart_text: dart.text(),
                            multiplier: dart.attr('data-multiplier'),
                            is_bust: isBust,
                            is_finished: isFinished,
                            darts_thrown: currentDart
                    });
                }
                updatePlayerScore(scoreNumeric);
            }


block content
    div(id='cancel-match-failed-alert' class='alert alert-danger' role='alert' hidden='true').
        Unable to cancel match

    mixin get_player_cell(player)
        - var playerId = player.player_id;
        td(id='player-score-' + playerId class=player.is_current_player ? 'uv-active-player-score' : 'uv-inactive-player-score')
            label(id='player-name-' + playerId class='label-player-name')= players[playerId].name + (player.wins ? ' (' + player.wins + ')' : '')
            label(id='player-id-' + playerId class='label label-block label-player-score-umpire' + (player.is_current_player ? ' current-player' : ''))= player.current_score

    mixin get_player_legs(player)
        - var playerId = player.player_id;
        td(id='player-legs-' + playerId class=player.is_current_player ? 'uv-active-player-legs' : 'uv-inactive-player-legs')
            label= (player.wins ? ' (' + player.wins + ')' : '0')

    mixin get_current_player_visit(player)
        - var playerId = player.player_id;
        if player.is_current_player
            td(id='player-visit-' + playerId class='uv-active-player-visits')
                table(style='width: 100%;')
                    tbody
                        tr
                            td(class='dart-score-container no-border'): label(class='first' text='0' data-multiplier='1')
                            td(class='dart-score-container no-border'): label(class='second' text='0' data-multiplier='1')
                            td(class='dart-score-container no-border'): label(class='third' text='0' data-multiplier='1')
        else
            td(id='player-visit-' + playerId class='uv-inactive-player-visits')
                table(style='width: 100%;')
                    tbody
                        tr
                            td(class='dart-score-container no-border'): label(class='first' text='0' data-multiplier='1')
                            td(class='dart-score-container no-border'): label(class='second' text='0' data-multiplier='1')
                            td(class='dart-score-container no-border'): label(class='third' text='0' data-multiplier='1')

    div(class='table-responsive no-border')
        table(class='uv-table-mode' style='table-layout: fixed')
            tbody
                tr
                    td= game.game_mode.name + ' / ' + 'R' + (Math.floor(match.visits.length / match.players.length) + 1)

    div(class='table-responsive no-border')
        table(class='uv-table-players' id='player-spectate-table' style='table-layout: fixed')
            tbody
                tr
                    each player in match_players
                        +get_player_cell(player)
                tr
                    each player in match_players
                        +get_player_legs(player)
                tr
                    each player in match_players
                        +get_current_player_visit(player)

    div(class='toggle-buttons' style='border-bottom: 1px solid #efefef; padding: 5px;') show / hide
    div(class='table-responsive')
        table(id='score-selector-table' class='table')
            tbody
                tr(class='row')
                    td(colspan='9' class='no-border')
                    td(colspan='2')
                        button(id='submit-score-button' type='button' style='line-height:1.5' class='needsclick btn-score btn-info btn-lg btn-block' data-match-id=match.id data-current-player-id=match.current_player_id data-players-in-match=match.player2match data-busted='0' data-finished='0') Submit
                    td(colspan='2')
                        button(id='undo-button' type='button' class='btn-score btn-info btn-lg btn-block')
                            span(class='glyphicon glyphicon-arrow-left' style='line-height:1.5' aria-hidden='true')
                block score_selector
                    mixin score_button(value, multiplier, text, custom_class)
                        - var score_button_class = 'btn-score btn-info btn-lg btn-block'
                        if custom_class
                            - score_button_class += ' ' + custom_class
                        else if multiplier === 3
                            - score_button_class += ' btn-triple'
                        else if multiplier === 2
                            - score_button_class += ' btn-double'
                        - text = text === undefined ? value : text;
                        button(type='button' class=score_button_class title=value * multiplier data-multiplier=multiplier)!= text + '<br>' + '.'.repeat(multiplier)

                    mixin button_row(values)
                        //- Mixin to generate each row of single, double and tripple buttons
                        for value in values
                            td: +score_button(value, 1)
                        for value in values
                            td: +score_button(value, 2)
                        for value in values
                            td: +score_button(value, 3)

                    tr(class='throw-buttons row')
                        td: +score_button(0, 1, 'Miss')
                        +button_row([ 20, 19, 18, 17 ])
                    tr(class='throw-buttons row')
                        td(rowspan='2' class='btn-double' style='height:100%;')
                            +score_button(25, 1, 'Bull', 'btn-double')
                        +button_row([ 16, 15, 14, 13 ])
                    tr(class='throw-buttons row')
                        +button_row([ 12, 11, 10, 9 ])
                    tr(class='throw-buttons row')
                        td(rowspan='2' class='btn-triple' style='height:100%;')
                            +score_button(25, 2, 'Bull', 'btn-triple')
                        +button_row([ 8, 7, 6, 5 ])
                    tr(class='throw-buttons row')
                        +button_row([ 4, 3, 2, 1 ])

    div(class='btn-group')
        button(type='button' class='btn btn-primary btn-block dropdown-toggle' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false') Advanced
            span(class='caret')
        ul(class='dropdown-menu')
            block advanced_options
                li: a(id='edit-scores-button') Edit scores
                li: a(id='cancel-match-button') Cancel Match